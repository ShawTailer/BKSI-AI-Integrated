<div class="uv-highlight-component" data-thread-id="{{ threadId }}"></div> 
<script>
const CONFIG = {
    apiEndpoint: "http://127.0.0.1:8210",
    "bksi-api-key": "3ab48662b25ac8e662ecae2949354a6720b5c262c9063635d2cc0c4de9890f56",
    buttonText: "Trợ giúp AI",
    styles: {
        button: {
            "background-color": "rgb(131, 144, 240);", 
            "color": "white",             
            "padding": "8px 15px",        
            "border": "none",            
            "border-radius": "4px",        
            "cursor": "pointer",       
            "font-weight": "bold"
        },
        highlightWrapper: {
            "border": "1px solid #ccc",   
            "border-radius": "8px",        
            "padding": "12px",            
            "background-color": "#ffffff"
        },
        highlightTitle: {
            "color": "#222226",           
            "font-size": "20px",      
            "font-weight": "600",       
            "line-height": "16px",         
            "margin-top": "10px",      
            "font-family": "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif"
        },
        highlightTag: {
            "background-color": "CornflowerBlue",
            "color": "white", 
            "padding": "2px 5px",
            "border-radius": "5px", 
            "display": "inline-flex",
            "align-items": "center"
        },
        removeButton: {
            "background": "none",
            "border": "none",
            "color": "white",
            "font-weight": "bold",
            "margin-left": "5px", 
            "cursor": "pointer"
        },
        problematicEntityItem: {
            "padding": "5px",
            "border-bottom": "1px solid #eee",
            "display": "flex",
            "justify-content": "space-between",
            "align-items": "center"
        },
        undoButton: {
            "background": "none",
            "border": "none",
            "color": "#dc3545",
            "font-weight": "bold",
            "cursor": "pointer",
            "margin-left": "5px",
            "font-size": "16px"
        }
    }
};


</script>
{% block templateCSS %}
    <style>
        .floating-btn {
            display: block;
            position: fixed;
            right: 10px;
            bottom: 220px;
            z-index: 1000;
            cursor: pointer;    
        }

        .floating-btn img {
            width: 40px;
            height: 40px;
            padding: 10px;
            border-radius: 6px;
            box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.2);
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }

        /* Hover effect to make the button more interactive */
        .floating-btn img:hover {
            transform: scale(1.1);
            box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.3);
        }
        .chatbox {
            position: fixed;
            right: -500px;
            bottom: 80px;
            width: 500px;
            height: 100%;
            background: white;
            box-shadow: -2px 0px 10px rgba(0, 0, 0, 0.2);
            padding: 15px;
            transition: right 0.3s ease;
            z-index: 999;
            border-radius: 10px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            font-family: sans-serif;
            resize: horizontal;
            overflow: auto;
            min-width: 300px;
        }

        .chatbox .resize-handle {
            position: absolute;
            left: -5px;
            top: 0;
            width: 10px;
            height: 100%;
            cursor: ew-resize;
        }
        .chatbox.open {
            top: 0px;
            bottom: 0px;
            right: 10px;
        }

        .chat-header {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .ai-tool {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-bottom: 10px;
            border-radius: 10px;
            padding: 8px;
            display: flex;
            flex-direction: column;
        }

        /* Vertical tool list */
        .tool-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-top: 10px;
        }

        .tool-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            background-color: #f5f5f5;
            border-radius: 8px;
            transition: all 0.2s ease;
        }

        .tool-item:hover {
            background-color: #eaeaea;
        }

        .tool-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .tool-info img {
            width: 24px;
            height: 24px;
            object-fit: contain;
        }

        .tool-name {
            font-size: 14px;
            font-weight: 500;
            color: #333;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        /* Toggle Switch */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 40px;
            height: 20px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }

        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 2px;
            bottom: 2px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .toggle-slider {
            background-color: #007bff;
        }

        input:checked + .toggle-slider:before {
            transform: translateX(20px);
        }

        .chat-box{
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }
        .chat-messages {
            flex-grow: 1;
            overflow-y: auto;
            max-height: 400px;
            border: 1px solid #ddd;
            background: #f9f9f9;
            padding: 5px;
            border-radius: 5px;
        }

        .chat-input {
            display: flex;
            gap: 5px;
            margin-top: 10px;
        }

        .chat-input input {
            flex: 1;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .chat-input button {
            padding: 8px 12px;
            border: none;
            background-color: #007bff;
            color: white;
            border-radius: 5px;
            cursor: pointer;
        }

        .chat-input button:hover {
            background-color: #0056b3;
        }

        #close-chat {
            background-color: #1f1f1f;
            border: none;
            color: white;
            font-size: 18px;
            cursor: pointer;
            border-radius: 50%;
            width: 22px;
            height: 22px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.2s ease;
        }
    </style>
{% endblock %}

{% block pageContent %}
    <div id="floating-button" class="floating-btn">
        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/de/HCMUT_official_logo.png/1200px-HCMUT_official_logo.png" alt="HCMUT Logo">
    </div>

    <div id="sidebar" class="sidebar-box open">
        <div id="chatbox" class="chatbox">
            <div class="chat-header">
                <span>Xin chào 👋</span>
                <button id="close-chat">
                    <svg
                        width="20"
                        height="20"
                        viewBox="0 0 18 18"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        <path
                        d="M4.51025 3.51594C4.2386 3.23845 3.79343 3.23372 3.51594 3.50537C3.23845 3.77702 3.23372 4.22219 3.50537 4.49968L8.00075 9.09168L3.5155 13.4902C3.23825 13.7621 3.2339 14.2072 3.50579 14.4845C3.77769 14.7617 4.22286 14.7661 4.50012 14.4942L9 10.0814L13.4999 14.4942C13.7771 14.7661 14.2223 14.7617 14.4942 14.4845C14.7661 14.2072 14.7617 13.7621 14.4845 13.4902L9.99924 9.09168L14.4946 4.49968C14.7663 4.22219 14.7615 3.77702 14.4841 3.50537C14.2066 3.23372 13.7614 3.23845 13.4897 3.51594L9 8.10217L4.51025 3.51594Z"
                        fill="currentColor"
                        />
                    </svg>
                </button>
            </div>

            <div class="ai-tool" id="ai-tool">
                <h4>Các công cụ tích hợp</h4>
                <div class="tool-list">
                    <!-- Highlight Tool -->
                    <div class="tool-item">
                        <div class="tool-info">
                            <img src="chrome-extension://ofpnmcalabcbjgholdjcjblkibolbppb/static/global/src/static/chatBox/chatHomeView/chatHomeViewWrite.png" alt="Highlight Tool" />
                            <span class="tool-name">Tìm kiếm từ khóa</span>
                        </div>
                        <label class="toggle-switch">
                            <input type="checkbox" id="highlight-toggle">
                            <span class="toggle-slider"></span>
                        </label>
                    </div>
                    
                    <!-- Summarize Tool -->
                    <div class="tool-item">
                        <div class="tool-info">
                            <img src="chrome-extension://ofpnmcalabcbjgholdjcjblkibolbppb/static/global/src/static/chatBox/chatHomeView/chatHomeViewAiDetector.png" alt="Summarize Tool" />
                            <span class="tool-name">Tóm gọn câu hỏi</span>
                        </div>
                        <label class="toggle-switch">
                            <input type="checkbox" id="summarize-toggle">
                            <span class="toggle-slider"></span>
                        </label>
                    </div>
                    
                    <!-- AI Answer Tool -->
                    <div class="tool-item">
                        <div class="tool-info">
                            <img src="chrome-extension://ofpnmcalabcbjgholdjcjblkibolbppb/static/global/src/static/chatBox/chatHomeView/bots.png" alt="AI Answer Tool" />
                            <span class="tool-name">AI tự trả lời</span>
                        </div>
                        <label class="toggle-switch">
                            <input type="checkbox" id="aianswer-toggle">
                            <span class="toggle-slider"></span>
                        </label>
                    </div>
                </div>
            </div>

            <div class="chat-box" id="chat-box">
                <!-- Chat content will be dynamically added here -->
            </div>  
        </div>
    </div>
{% endblock %}

<script>
    function setCookie(name, value, days = 30) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        const expires = "; expires=" + date.toUTCString();
        document.cookie = name + "=" + (value || "") + expires + "; path=/";
    }

    function getCookie(name) {
        const nameEQ = name + "=";
        const ca = document.cookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) === ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

    function isFirstVisit(cookieName) {
        return getCookie(cookieName) === null;
    }

    const AppState = {
        highlight: false, 
        summarize: false,
        aiAnswer: false,
        
        // Set value and persist to cookie
        setHighlight(value) {
            this.highlight = value;
            setCookie('highlight', value);
        },
        setSummarize(value) {
            this.summarize = value;
            setCookie('summarize', value);
        },
        setAiAnswer(value) {
            this.aiAnswer = value;
            setCookie('aiAnswer', value);
        }
    };

    document.addEventListener("DOMContentLoaded", function () {
        {# const chatbox = document.querySelector(".chatbox");
        const resizeHandle = document.createElement("div");
        resizeHandle.classList.add("resize-handle");
        chatbox.appendChild(resizeHandle);

        

        let isResizing = false;

        resizeHandle.addEventListener("mousedown", (e) => {
            isResizing = true;
            document.addEventListener("mousemove", onMouseMove);
            document.addEventListener("mouseup", onMouseUp);
        });

        function onMouseMove(e) {
            if (isResizing) {
                const newWidth = window.innerWidth - e.clientX;
                chatbox.style.width = `${Math.max(300, Math.min(newWidth, 800))}px`;
            }
        }

        function onMouseUp() {
            isResizing = false;
            document.removeEventListener("mousemove", onMouseMove);
            document.removeEventListener("mouseup", onMouseUp);
        } #}

        if (isFirstVisit('highlight')) {
        // Only for first time visits, set default
            setCookie('highlight', true);
            AppState.highlight = true;
        } else {
            // For returning visitors, read from cookie
            AppState.highlight = getCookie('highlight') === 'true';
        }

        AppState.summarize = getCookie('summarize') === 'true';
        AppState.aiAnswer = getCookie('aiAnswer') === 'true';

        document.getElementById('highlight-toggle').checked = AppState.highlight;
        document.getElementById('summarize-toggle').checked = AppState.summarize;
        document.getElementById('aianswer-toggle').checked = AppState.aiAnswer;
        
        if (AppState.highlight) {
            toggleHighlightFeature(true);
        }
        const toggleSwitches = document.querySelectorAll('.toggle-switch input');
        toggleSwitches.forEach(toggle => {
            toggle.addEventListener('change', function() {
                const toolId = this.id.split('-')[0]; // Extract tool name from ID
                console.log(`${toolId} tool is now ${this.checked ? 'enabled' : 'disabled'}`);
                
                if (toolId === 'highlight') {
                    AppState.highlight = this.checked;
                    toggleHighlightFeature(this.checked);
                } else if (toolId === 'summarize') {
                    AppState.summarize = this.checked;
                    console.log("Summarize feature is not implemented yet");
                } else if (toolId === 'aianswer') {
                    AppState.aiAnswer = this.checked;
                    console.log("AI Answer feature is not implemented yet");
                }
            });
        });
    });
    
    function toggleHighlightFeature(enabled) {
        if (enabled) {
            console.log("Initializing Highlight feature");
            (async function() {
                try {
                    await init();
                } catch (error) {
                    console.error("Error during initialization:", error);
                }
            })();
        } else {
            console.log("Disabling Highlight feature");
            if (window.aiButtonObserver) {
                window.aiButtonObserver.disconnect();
            }
            cleanupAllButtons();
        }
    }

    var ChatView = Backbone.View.extend({
        el: 'body',

        events: {
            'click #floating-button': 'toggleChatbox',
            'click #close-chat': 'toggleChatbox',
            'click #send-message': 'sendMessage',
            'keypress #chat-input-field': 'handleEnterKey'
        },

        toggleChatbox: function () {
            $('#chatbox').toggleClass('open');
            if ($('#chatbox').hasClass('open')) {
                $('#floating-button').hide(); // Hides the floating button
            } else {
                $('#floating-button').show(); // Shows the floating button
            }
        },

        sendMessage: function () {
            var message = $('#chat-input-field').val().trim();
            if (message) {
                var userMessage = `<p><strong>You:</strong> ${message}</p>`;
                $('#chat-messages').append(userMessage);
                $('#chat-input-field').val('');
                $('#chat-messages').scrollTop($('#chat-messages')[0].scrollHeight);

                // Simulated bot response
                setTimeout(() => {
                    $('#chat-messages').append(`<p><strong>Support:</strong> Thank you for your message!</p>`);
                    $('#chat-messages').scrollTop($('#chat-messages')[0].scrollHeight);
                }, 1000);
            }
        },

        handleEnterKey: function (event) {
            if (event.key === "Enter") {
                this.sendMessage();
            }
        }
    });

    var chatView = new ChatView();
</script>
<script>
async function dataFetch(url, data, method) {
    if (!url) {
        return Promise.reject(new Error("URL is required"));
    }
    const options = {
        method: method || 'GET',
        headers: { 
            "Content-Type": "application/json",
            "bksi-api-key": CONFIG["bksi-api-key"]
        },
    };
    
    if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {
        options.body = JSON.stringify(data);
    }
    
    return fetch(url, options)
        .then(response => {
            if (!response.ok) {
                console.error(`HTTP Error: ${response.status} - ${response.statusText}`);
                throw new Error(`Network response failed (${response.status}): ${response.statusText}`);
            }
            return response.json();
        })
        .catch(error => {
            console.error("Fetch operation failed:", error.message);
            throw error;
        });
}

const highlightEntities = [];
const removedHighlightEntities = [];
const removedEntities = [];
const processedTickets = new Set();

function addAIButton() {
    if (!$ || typeof $ !== 'function') {
        console.error("jQuery is not available. Cannot add AI button.");
        return;
    }
    
    $('.uv-ticket-strip').each(function() {
        const $currentStrip = $(this);
        
        const ticketId = getTicketIdentifier($currentStrip);
        
        if (processedTickets.has(ticketId)) {
            const $targetElement = findTargetElement($currentStrip);
            if ($targetElement) {
                $targetElement.find('.ai-action-button-container').remove();
            }
            return;
        }
        
        const $targetElement = findTargetElement($currentStrip);
        if (!$targetElement) return;
        
        if ($targetElement.find('.ai-action-button').length === 0) {
            const $buttonContainer = createButtonContainer();
            const $button = createAIButton($currentStrip);
            
            $buttonContainer.append($button);
            $targetElement.append($buttonContainer);
        }
    });
}

function getTicketIdentifier($strip) {
    const $threadLink = $strip.find('.copy-thread-link');
    if ($threadLink.length) {
        return $threadLink.attr('id') || $strip.index();
    }
    
    // Combine some attributes to make it more unique
    const stripClass = $strip.attr('class');
    const stripHtml = $strip.html().substring(0, 100); 
    return `${stripClass}-${stripHtml.length}`;
}

// Helper function to find the target element
function findTargetElement($strip) {
    const $next = $strip.next();
    const $nextNext = $next.next();
    
    if ($next.hasClass('uv-ticket-main-lt')) {
        return $next.next(); 
    } 
    else if ($nextNext.hasClass('uv-ticket-main-lt')) {
        return $nextNext.next();
    }
    return null;
}

function createButtonContainer() {
    return $('<div>')
        .addClass('ai-action-button-container')
        .css({
            'text-align': 'right',
            'width': '100%',
            'margin-top': '10px'
        });
}

// Create AI button with event handling
function createAIButton($strip) {
    const $button = $('<button>')
        .addClass('ai-action-button')
        .text(CONFIG.buttonText)
        .css(CONFIG.styles.button);
        
    $button.on('click', function() {
        const ticketId = getTicketIdentifier($strip);
        processedTickets.add(ticketId);
        
        $(this).parent().remove();
        
        if (window.aiButtonObserver) {
            window.aiButtonObserver.disconnect();
        }
        
        handleAIButtonClick($strip);
        
        {# setTimeout(() => {
            if (window.aiButtonObserver) {
                window.aiButtonObserver.observe(document.body, {
                    childList: true,
                    subtree: true
                });
            }
        }, 500); #}
    });
    
    return $button;
}

function handleAIButtonClick($strip) {
    try {
        const $next = $strip.next();
        const $nextNext = $next.next();
        
        const threadData = extractThreadData($strip, $next, $nextNext);
        if (!threadData) {
            console.error("Failed to extract thread data");
            return;
        }
        
        const { threadId, messageElement, messageText } = threadData;
        

        
        const highlightedContainer = createHighlightedContainer(messageElement[0]);
        
        processMessageWithAI(threadId, messageText, highlightedContainer);
    } catch (error) {
        console.error("Error in AI button click handler:", error);
    }
}

function extractThreadData($strip, $next, $nextNext) {
    let threadId = null;
    let $messageElement;
    
    if ($next.hasClass('uv-ticket-main-lt')) {
        const highlightComponent = document.querySelector('.uv-highlight-component');
        threadId = highlightComponent?.dataset.threadId || null;
        $messageElement = $next.next().find('.message');
    } else {
        const threadLink = $strip.find('.copy-thread-link');
        threadId = threadLink.length ? threadLink.attr('id')?.replace('thread', '') : null;
        $messageElement = $nextNext.next().find('.message');
    }
    
    const messageText = $messageElement.text().trim();
    
    if (!messageText) {
        console.error("No message text found");
        return null;
    }
    
    
    return { threadId, messageElement: $messageElement, messageText };
}

function copyToClipboard(threadId, messageText) {
    const clipboardText = `Thread ID: ${threadId}\n\nMessage:\n${messageText}`;
    return navigator.clipboard.writeText(clipboardText);
}

function createHighlightedContainer(messageElement) {
    const highlightedContainer = document.createElement('div');
    highlightedContainer.className = 'highlighted-contain';
    
    messageElement.parentNode.insertBefore(highlightedContainer, messageElement.nextSibling);
    return highlightedContainer;
}
function summaryMessage(originalMessage, summaryData) {
    if (!summaryData) return '';
    const summaryText = 
        typeof summaryData === 'string' 
            ? summaryData 
            : Array.isArray(summaryData) 
                ? summaryData.join(' ') 
                : JSON.stringify(summaryData);
    const boxStyle = [
        'border:1px solid #ccc',
        'padding:10px',
        'margin-top:10px',
        'background-color:#f0f8ff',
        'border-radius:4px'
    ].join(';');
    const titleStyle = [
        'font-weight:bold',
        'margin-bottom:5px'
    ].join(';');

    return `
        <div class="summary-box" style="${boxStyle}">
            <div class="summary-title" style="${titleStyle}">Tóm tắt</div>
            <p>${summaryText}</p>
        </div>
    `;
}
async function processMessageWithAI(ticketId, message, container) {
    if (!message) {
        console.error("No message content to process");
        return;
    }
    const postData = {
        id: ticketId,
        payload: message,
    };
    try {
        const apiUrl = `${CONFIG.apiEndpoint}/route/ticket/use/${ticketId}`;
        const data = await dataFetch(apiUrl, null, "GET");
        if (!data || !data.ner || !data.summary) {
            throw new Error("Invalid API response");
        }
        highlightEntities.length = 0;
        removedHighlightEntities.length = 0;
        data.ner.forEach(ent => {
            highlightEntities.push({
                entity_string: ent.entity_string,
                entity_start_position: ent.entity_start_position,
                entity_end_position: ent.entity_end_position
            });
        });
        const highlightedMessage = highlightMessage(message, data.ner);
        const summaryHTML = summaryMessage(message, data.summary);
        renderHighlightedContent(container, highlightedMessage,summaryHTML);
    } catch (error) {
        console.error("AI processing failed:", error);
        container.innerHTML = `
            <div style="border: 1px solid #ccc; border-radius: 8px; padding: 12px; background-color: #ffffff;">
                <p>Failed to process message with AI. Error: ${error.message}</p>
            </div>
        `;
    }
}

function highlightMessage(message, highlightEntities) {
    if (typeof message !== 'string' || !Array.isArray(highlightEntities)) {
    console.warn('highlightMessage: invalid inputs');
    return message;
  }

  const indexed = highlightEntities.map((e, idx) => ({
    ...e,
    __idx: idx
  }));

  indexed.sort((a, b) => b.entity_start_position - a.entity_start_position);

  let result = message;
  indexed.forEach(ent => {
    const { entity_string, entity_start_position: start, entity_end_position: end, __idx } = ent;
    const wrapped = createHighlightedEntityHTML(entity_string, __idx);
    result = result.slice(0, start) + wrapped + result.slice(end);
  });

  setTimeout(attachRemoveHighlightListeners, 100);
  return result;
}

function findEntityInMessage(message, entityString) {
    let pos = message.indexOf(entityString);
    if (pos !== -1) return pos;
    
    pos = message.toLowerCase().indexOf(entityString.toLowerCase());
    if (pos !== -1) {
        console.log("Found entity with case insensitive search");
        return pos;
    }
    
    const normalizedEntity = entityString.replace(/\s+/g, ' ').trim();
    const normalizedMessage = message.replace(/\s+/g, ' ');
    pos = normalizedMessage.indexOf(normalizedEntity);
    if (pos !== -1) {
        console.log("Found entity with normalized spaces");
        return pos;
    }
    
    if (entityString.length > 5) {
        const words = normalizedEntity.split(' ').filter(w => w.length > 3);
        if (words.length > 1) {
            for (let i = 0; i < normalizedMessage.length; i++) {
                let allWordsFound = true;
                let currentPos = i;
                
                for (const word of words) {
                    currentPos = normalizedMessage.indexOf(word, currentPos);
                    if (currentPos === -1) {
                        allWordsFound = false;
                        break;
                    }
                    currentPos += word.length;
                }
                
                if (allWordsFound) {
                    console.log("Found entity with word sequence matching");
                    return i;
                }
            }
        }
    }
    
    return -1;
}

function createHighlightedEntityHTML(entityString, index) {    
    return `
        <span class="highlight-tag" data-entity-index="${index}" style="background-color: CornflowerBlue; color: white; padding: 2px 5px; border-radius: 5px; display: inline-flex; align-items: center;">
            ${entityString}
            <button class="remove-highlight" data-entity-index="${index}" style="background: none; border: none; color: white;font-weight: bold; margin-left: 5px; cursor: pointer;">&times;</button>
        </span>
    `;
}

function attachRemoveHighlightListeners() {
    console.log(removedHighlightEntities)
    console.log(highlightEntities)
    document.querySelectorAll('.remove-highlight').forEach(button => {
        const newButton = button.cloneNode(true);
        button.parentNode.replaceChild(newButton, button);
        
        newButton.addEventListener('click', function() {
            const entityIndex = this.getAttribute('data-entity-index');
            removeHighlight(entityIndex);
        });
    });
}

function removeHighlight(entityIndex) {
    const [removed] = highlightEntities.splice(entityIndex, 1);
  if (!removed) return;

  removedHighlightEntities.push(removed);

  const span = document.querySelector(`.highlight-tag[data-entity-index="${entityIndex}"]`);
  if (span) span.replaceWith(document.createTextNode(removed.entity_string));

  const removedStrings = removedHighlightEntities.map(e => e.entity_string);
  updateProblematicEntitiesBox(removedStrings);
}

function getNodePosition(node) {
    let position = 0;
    let current = node;
    
    while (current.previousSibling) {
        position++;
        current = current.previousSibling;
    }
    
    return position;
}

function addEntityToProblematicList(entityText, index) {
    const list = document.getElementById('problematic-entities-list');
    if (!list) return;
    
    const listItem = document.createElement('li');
    
    Object.entries(CONFIG.styles.problematicEntityItem).forEach(([key, value]) => {
        listItem.style[key] = value;
    });
    
    const textSpan = document.createElement('span');
    textSpan.textContent = entityText;
    
    const undoButton = document.createElement('button');
    undoButton.innerHTML = '&times;'; // × symbol
    undoButton.setAttribute('data-removed-index', index);
    undoButton.className = 'undo-remove-button';
    
    Object.entries(CONFIG.styles.undoButton).forEach(([key, value]) => {
        undoButton.style[key] = value;
    });
    
    undoButton.addEventListener('click', function() {
        const removedIndex = parseInt(this.getAttribute('data-removed-index'));
        undoRemoveHighlight(removedIndex);
    });
    
    listItem.appendChild(textSpan);
    listItem.appendChild(undoButton);
    
    list.appendChild(listItem);
}

function undoRemoveHighlight(removedIndex) {
    const [ent] = removedHighlightEntities.splice(removedIndex, 1);
  if (!ent) return;

  highlightEntities.push(ent);

  const p = document.querySelector('.highlight-wrapper p');
  if (p) {
    p.innerHTML = highlightMessage(p.textContent, highlightEntities);
  }

  // 4) Now rebuild the problematic box from whatever remains removed
  const remaining = removedHighlightEntities.map(e => e.entity_string);
  updateProblematicEntitiesBox(remaining);
}

function findTextNodes(element, result) {
    if (element.nodeType === 3) { // Text node
        result.push(element);
        return;
    }
    
    for (let i = 0; i < element.childNodes.length; i++) {
        findTextNodes(element.childNodes[i], result);
    }
}

function updateProblematicEntitiesBox(strings) {
  const box  = document.querySelector('.problematic-entities-box');
  const list = document.getElementById('problematic-entities-list');
  if (!box || !list) return;

  box.style.display = strings.length ? 'block' : 'none';
  list.innerHTML = '';

  strings.forEach((text, idx) => {
    const li = document.createElement('li');
    Object.assign(li.style, {
      display:        'flex',
      justifyContent: 'space-between',
      alignItems:     'center',
      padding:        '6px 10px',
      borderBottom:   '1px solid #eee',
      fontSize:       '14px',
      color:          '#333'
    });
    const textSpan = document.createElement('span');
    textSpan.textContent = text;
    const btn = document.createElement('button');
    btn.textContent = '×';  
    Object.assign(btn.style, {
      background:    'transparent',
      border:        'none',
      fontSize:      '18px',
      color:         '#c00',
      cursor:        'pointer',
      lineHeight:    '1',
      padding:       '0 5px'
    });
    btn.addEventListener('click', () => undoRemoveHighlight(idx));
    li.appendChild(textSpan);
    li.appendChild(btn);
    list.appendChild(li);
  });
}
function renderHighlightedContent(container, highlightedMessage, summaryHTML) {
    container.innerHTML = `
        <div class="highlight-wrapper" style="border: 1px solid #ccc; border-radius: 8px; padding: 12px; background-color: #ffffff;">
            <div style="color: #222226; font-size: 20px; font-weight: 600; line-height: 16px; margin-top: 10px; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">Công cụ tìm kiếm từ khóa</div>
            <p>${highlightedMessage}</p>
            ${summaryHTML}
            <div class="problematic-entities-box" style="width: 300px; margin: 10px; padding: 10px; border: 1px solid #ccc; background-color: #f9f9f9; max-height: 200px; overflow-y: auto; display: none;">
                <h5>Từ khóa không tốt:</h5>
                <ul id="problematic-entities-list"></ul>
            </div>
            <div class="assessment-buttons">
                <h5>Đánh giá câu trả lời của AI:</h5>
                <button class="custom-btn1" style="background-color: rgb(131, 144, 240); color: rgb(255, 255, 255); padding: 8px 15px; margin-top: 6px; border: none; border-radius: 4px; cursor: pointer; font-weight: bold;" data-assessment="positive">Rất tốt</button>
                <button class="custom-btn1" style="background-color: rgb(131, 144, 240); color: rgb(255, 255, 255); padding: 8px 15px; margin-top: 6px; border: none; border-radius: 4px; cursor: pointer; font-weight: bold;" data-assessment="neutral">Tốt</button>
                <button class="custom-btn1" style="background-color: rgb(131, 144, 240); color: rgb(255, 255, 255); padding: 8px 15px; margin-top: 6px; border: none; border-radius: 4px; cursor: pointer; font-weight: bold;" data-assessment="negative">Không tốt</button>
                <div id="thank-you-message" style="display: none; margin-top: 10px; font-size: 18px; color: #00008B;">
                    Cám ơn bạn đã góp ý 
                </div>
            </div>
            {# <button id="ai-suggestion-btn" style="background-color: rgb(131, 144, 240); color: rgb(255, 255, 255); padding: 8px 15px; margin-top: 8px; border: none; border-radius: 4px; cursor: pointer; font-weight: bold;">Câu trả lời gợi ý từ AI</button>
            <div id="ai-suggestion-box" style="display: none; margin-top: 10px; margin-bottom: 10px; padding: 10px; border: 1px solid #ccc; background-color: #f0f8ff; border-radius: 4px;">
                <textarea id="ai-suggestion-text" rows="5" style="width: 100%; padding: 8px; border-radius: 4px; border: 1px solid #ccc;"></textarea>
                <button id="copy-suggestion" style="background-color: rgb(131, 144, 240); color: rgb(255, 255, 255); padding: 8px 15px; margin-top: 6px; border: none; border-radius: 4px; cursor: pointer;">Sao chép gợi ý</button>
            </div> #}
        </div>  
    `;
    attachRemoveHighlightListeners();
    attachAssessmentButtonListeners();
    attachSuggestionButtonListeners();
    
}

function removeAllButtonsFromProcessedTickets() {
    $('.uv-ticket-strip').each(function() {
        const $strip = $(this);
        const ticketId = getTicketIdentifier($strip);
        
        if (processedTickets.has(ticketId)) {
            const $targetElement = findTargetElement($strip);
            if ($targetElement) {
                $targetElement.find('.ai-action-button-container').remove();
            }
        }
    });
}

// Attach event listeners to assessment buttons
function attachAssessmentButtonListeners() {
    document.querySelectorAll(".custom-btn1 ").forEach(button => {
        button.addEventListener("click", function() {
            const assessment = this.getAttribute("data-assessment");

            const thankYouMessage = document.getElementById("thank-you-message");
            if (thankYouMessage) {
                thankYouMessage.style.display = "block";
                
            }

            // Submit the assessment
            submitAssessment(assessment);
        });
    });
}

function attachSuggestionButtonListeners() {
    const suggestionBtn = document.getElementById("ai-suggestion-btn");
    if (suggestionBtn) {
        suggestionBtn.addEventListener("click", function() {
            const suggestionBox = document.getElementById("ai-suggestion-box");
            if (!suggestionBox) return;
            
            suggestionBox.style.display = suggestionBox.style.display === "none" ? "block" : "none";
            
            if (suggestionBox.style.display === "block") {
                const suggestionText = document.getElementById("ai-suggestion-text");
                if (suggestionText) {
                    suggestionText.value = "This is an AI-generated suggestion based on the customer's message.";
                }
            }
        });
    }
    
    const copyBtn = document.getElementById("copy-suggestion");
    if (copyBtn) {
        copyBtn.addEventListener("click", function() {
            const suggestionText = document.getElementById("ai-suggestion-text");
            if (!suggestionText) return;
            
            navigator.clipboard.writeText(suggestionText.value)
                .then(() => {
                    alert("Suggestion copied to clipboard!");
                })
                .catch(err => {
                    console.error("Failed to copy suggestion: ", err);
                    alert("Failed to copy. Please try again.");
                });
        });
    }
}

async function submitAssessment(assessment) {
    try {
        const messageElement = document.querySelector('.message');
        const message = messageElement?.textContent?.trim() || '';
        
        const problematicEntitiesList = document.getElementById('problematic-entities-list');
        const problematicEntities = [];

        if (problematicEntitiesList) {
            const listItems = problematicEntitiesList.getElementsByTagName('li');
            Array.from(listItems).forEach(item => {
                const entityString = item.textContent;
                const startPosition = message.indexOf(entityString);
                if (startPosition !== -1) {
                    problematicEntities.push({
                        entity_string: entityString,
                        entity_start_position: startPosition,
                        entity_end_position: startPosition + entityString.length
                    });
                }
            });
        }


        const nerRating = {
            'positive': 1,
            'neutral':   0,
            'negative': -1
        }[assessment] ?? 0;

        const nerSuggestions = removedHighlightEntities.map(e => ({
            entity_string:          e.entity_string,
            entity_start_position:  e.entity_start_position,
            entity_end_position:    e.entity_end_position
        }));
        const feedbackBody = [
        {
            service_name:  "ner",
            feedback_type: "rate",
            value:          nerRating
        },
        {
            service_name:  "summary",
            feedback_type: "usage",
            value:          1
        },
        {
            service_name:  "summary",
            feedback_type: "rate",
            value:          nerRating
        },
        {
            service_name:  "ner",
            feedback_type: "suggestion",
            value:         nerSuggestions
        }
        ];
        console.log("📝 Sending feedback:", feedbackBody);
        return await dataFetch(
            `${CONFIG.apiEndpoint}/route/report/feedback`,
            feedbackBody,
            'POST'
        ).then(data => {
            console.log('Assessment submitted successfully:', data);
            return data;
        });
    } catch (error) {
        console.error('Error in submitAssessment:', error);
    }
}

// Force remove all buttons from tickets (cleanup function)
function cleanupAllButtons() {
    $('.ai-action-button-container').remove();
}

// Initialize the application
async function init() {
    if (!AppState.highlight) {
        console.log("Highlight feature is disabled. Not initializing.");
        return;
    }
    try {
        cleanupAllButtons();
        addAIButton();
        window.aiButtonObserver = new MutationObserver(function(mutations) {
            let needsUpdate = false;
            
            mutations.forEach(function(mutation) {
                if (mutation.addedNodes && mutation.addedNodes.length) {
                    needsUpdate = true;
                }
            });
            
            if (needsUpdate) {
                
                addAIButton();
            }
        });
        window.aiButtonObserver.observe(document.body, {
            childList: true,
            subtree: true
        });
        
        console.log("AI assistance tool initialized");
            
        } catch (error) {
            console.error("Failed to initialize AI:", error);
        }
    
}
(async function() {
    try {
        await init();
    } catch (error) {
        console.error("Error during initialization:", error);
    }
})();
</script>
